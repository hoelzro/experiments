%! draw a cell with potentially missing walls

% usage: dict key getifknown -> value
/getifknown {
  2 copy known
  { get } % if the key is in the dict
  { pop pop false } % otherwise, fall back to false, discarding the arguments
  ifelse
} def

% usage: walls wallkey cell_size x_mult y_mult drawwall
/drawwall {
  % calculate relative Y movement
  2 index mul

  % calculate relative X movement
  3 1 roll mul

  % Y X â†’ X Y
  exch

  % move walls and wallkey to the top of the stack
  4 2 roll

  % look up wallkey within walls
  getifknown

  { rlineto } % draw the wall if it's there
  { rmoveto } % otherwise, just move the cursor
  ifelse
} def

% usage: walls cell_size row_num col_num drawcell
/drawcell {
  % stash the current position and move it below the arguments
  currentpoint
  6 2 roll

  % calculate X coordinate: (col_num-1) * cell_size
  0 index
  1 sub
  3 index
  mul

  % calculate Y coordinate: (row_num-1) * cell_size
  2 index
  1 sub
  4 index
  mul

  rmoveto

  % we're done with row_num and col_num, so you can drop them
  pop pop

  % draw each wall
  1 index /south 2 index  1  0 drawwall
  1 index /east  2 index  0  1 drawwall
  1 index /north 2 index -1  0 drawwall
  1 index /west  2 index  0 -1 drawwall

  % drop walls and cell_size
  pop pop

  % restore cursor position
  moveto
} def

newpath
50 50 moveto
<< /south true /west true /east true >> 20 1 1 drawcell
1 0 0 setrgbcolor
stroke

newpath
50 50 moveto
<< /north true /west true /east true >> 20 2 2 drawcell
0 1 0 setrgbcolor
stroke

newpath
50 50 moveto
<< /north true /south true /east true >> 20 1 3 drawcell
0 0 1 setrgbcolor
stroke
